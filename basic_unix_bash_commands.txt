Basic Unix/Bash commands with explanation.

exit - close the terminal
Ctrl-C - gracefully stops the program in the terminal. It could not work if the program doen't design for this command or just stuck in a particule state.
Ctrl-S - stops flowing the data on the screen.
Ctrl-Q - resums flowing data on the screen. These pair of commands could be used in programs where output scrolls rapidly.
Ctrl-A - moves cursor to the beginning of the current line.
Ctrl-E - moves cursor to the end of the current line.
Ctrl-K - deletes the the text from the cursor position to the end of the line.
Arrow Up/Down - allows to quick grab commands that were used before.
tab-completion - auto complete the typing command.
uname - prints the system information. Without parameters only system name.
uname -a - prints all available system information including name, kernel, network node hostname and more.
date - shows current date.
who - displays a list of currently logged users with their login times and terminal information.
last - shows the history of previous user login (similar to 'who', but in the past)
history - shows all history of cammands that have been executed.
history 10 - shows last 10 commands that have been executed.
!<number_of_the_command> - runs setted by number (index) command from history.
man <command_name> - shows a detailed manual about the command.

touch <file_name> - creates an empty file or can be used to update existing file timestamps (metadata)
vi <file_name> opens file in terminal redactor 'vi'
vim <file_name> - more enchanced version of 'vi'
view <file_name> - it is a link to 'vi' or 'vim'. But it opens the file in read only mode.
vimdiff [file.1...file.n] - is the feature of 'vim' that allows to compare and highlight the differences in differenet files.
less <file_name> - allows to view file in terminal. Provides scrolling, searching and navigation.
move <file_name> - allows to view file by page. It's similar to 'less' but with but have a limit functional

top - monitors system processes in real time including CPU usage, memory usage, running processes, system uptime, and more.
htop - more advanced version of 'top'
ps - provides a snapshot of active porcesses on the system in the moment of the command usage.
ps aux or ps -ef - displays a detailed list of all processes currently running on the system, including information such as user, PID (Process ID), CPU usage, memory usage, command name, etc.
ps auxww - it's similar to ps aux but the 'ww' prowides the output with no truncating.

cd - without args changes current directory to user's home directory.
'cd -' - changes current directory to the directory that where right before.
pwd - print working directory.
ls - displays the files and directories in current working directory.
ls -alF - is 'ls' with options: 
'a' - show all files include hidden; 'l' - show the additional information, such as file permision, ownership group, file size, modification date, file/directory names;
'F' - appends indecation: '/' - at the end of directory names; '*' at the end of executable files; '@' at the and of symbolic links; no indicator for regular files.
ls -aldF - + option 'd' - lists only the directory themselves. In combination with with other options it shows the addition information about the directories.
ls -ltr - 't' - sorts by modification time (newest first); 'r' - reverse the list.

echo "path is $PATH" - 'echo' - prints text or variables;
"path is $PATH" - 'path is' - message that will be printed; '$PATH' - the dollar sign used to reference the value of the 'PATH' enviroment variable.

echo $PATH - prints the referenced variable 'PATH'

date - shows current system date.
cal - prints the callendar.
cal -y or <year> - prints the callendar of the current or setted year.

[*] set - with no options displays shell variables functions. Can be used in following cases:
   *Setting enviroment variables: set VAR = "Hello, World!".
   *Setting positional parameters: set -- bike orange flower
   *Enabling/Disabling shell options: set -o noclober, set -o.
   *Enabling/Disabling debugging mode: set -x

[*] env - with no options displays enviroment variables. Can be used in following cases:
   *Setting enviroment variables and execute it with a command: env PATH=/custom/path ls
   *Modify a global variable for a command: env USER=newuser command
   *Unset variables: env -u VAR1
   *Unset variables for the specific command: env -u PATH ls

[*] export <variable_name> - uses to export variables to other processes. With no options displays a list of currently defined enviroment variables ready for export

bash <file.hs> - executes file.
source <file.hs> or . <file.hs> - executes the file as if the commands in the file were typed directly into the current shell.
It can set enviroment variables, or do some other changes and they will be applied to current shell.

[*] .bashrc vs .bash_profile vs .bash_aliases

stdin - standart intput. By default reads data from keyboard or another source/programm in pipe case. To redirect reading use "<".
stdout - standart output. By default displays data on the terminal or sends to another source/programm in pipe case. To readirect ise "1>"
stderr - standart error output. By default displays data on the terminal or sends to another source/programm in pipe case. To readirect ise "2>". Shouldn't be mixed with standart output.

cat <file_name> or <file_name1...file_name_n> - prints the content of file(s) to the terminal. Can be used to concatenate files.
head -n <amount_of_lines> <file_name> - displays some amount of lines staring from the beginning. By default prints 10 lines.
tail -n <amount_of_lines> <file_name> - similar to 'head', but starts from the end of the file.

type <func_name> - returns the info about the function, like type: hashed or aliased, and place or realisation(implementation) of the function.
which <file_name> - displays the path of executable files in the system's PATH enviroment veriables.

grep - is used to search specific files or text by pattern. There are the examples of different usecases:
   *cat file(s) | grep "Python" - dispalys the lines of text from file(s) that contain the word(pattern) "Python".
   *cat file(s) | grep "Python" | grep -v "IN_PROCESS" - the same as the previous command but shows the text that doesn't contain "IN_PROCESS".
   *ll | grep "u0" - displays the list of files/foldes that contain "u0" in the name.

find - provides extensive capabilities of search. It's similar to 'ls | grep' combination but more powerful and flexable.There is examples of usage:
   *find path/to/folder/ -name 'u0*.txt' - displays the list of the files that have first name characters 'u0' and last name characters '.txt'
   *find python_tutorials/ -name 'u0*.txt' | xargs grep 'file' - the same as previous command but with grep sections that prints the lines of files with 'file' word.

xargs - converts data from stdin or pipes in arguments. It's useful when common or piped command doesn't have a standart input but only arguments.

[*] 
    find . -print0 | xargs -0 cmd 
    find . -exec cmd -option1 -option2 -- {} +
    find . -print0 | xargs -0 cmd -option1 -option2 --

cp - copies files or foledrs, also allows to rename file or folder. Examples of usage:
   cp file1 file2 - copies all content from file1 to file2. If file2 is not exist, 'cp' will create it in other way it will overwrite the content of file2.
   cp file1 /some/path/file2 - copies file1 to '/some/path/' directory and renames it to file2.

mv - moves files or folders, can do rename as 'cp'. Examples of usage:
   mv file1 file2 - moves file1 to file2, replaces the content of file1 to file2. If file2 is not exist 'mv' will create it. Removes the original file1.
   mv file1 /some/path/file2 - works as 'cp' but removes the original file1.

rm <file_name> - permanently removes file. The file won't be recovered from the system's trash or recycle bin.
rm -rf <dir_name> - permanently and recursively deletes the removes the directory with all subdirectories and files. Command parameters:
   -r - recursive deleting.
   -f - force deleting. Without prompting for confirmation, even if the files are write - protected.

tar zcvf myfile.tar.gz somefiles* - zips files that match the pattern 'somefiles*' and names the archive 'myfile.tar.gz'. Command parameters:
   z - use gzip to compress the files.
   c - creates new archive.
   v - show all the processed files.
   f - spceifies the file name.

tar ztvf myfile.tar.gz - list the content of 'myfile.tar.gz' without extracting the content. Command parameters:
   z - use gzip to decompress the content.
   t - lists lists the content of archive without extracting.

tar zxvf myfile.tar.gz - extracting the content of 'myfile.tar.gz'. Command options:
   x - extracts file from the archive.

zip -r mystuff.zip dir1 dir2 - zips the content of dir1 and dir2 to zipfile mystuff.zip, including all their subdirectories and files. Command parameters:
   -r - recuresively includes all subdirs and files.

unzip mystuff.zip - unzips the mystuff.zip.

kill pid - sends 'SIGTERM' signal to the process by process id (PID), and allows it to clean up tasks and exit gracefully.
kill -9 pid - sends 'SIGKILL' signal to the process which immediatly terminates it.
pkill name - uses name of process instead of id.

nohup <command> & - allows command to immune hangups signals and continue working even if terminal is closed or user logs out. Command parameters:
   & - runs the command in the background, allowing to continue using the terminal.

example of usage:
   nohup python myscript.py > mylog.log 2>&1 &:
       2>&1 - redirects stderr to same location as stdout.

jobs - displays the list of background jobs that are running within current shell session.

fg <%job_number> ; Ctrl-C (interact action) - allows to bring job from background to foreground. Job can be interacted from terminal.

crontab -e - allows to edit crontab table which contains scheduled tasks.

crontab -l - displays the list of current crontab tasks for current user.

ssh-keygen -t rsa -b 4096 -C "your_email@example.com" - generate ssh-key.

ftp <server_adress> - file transfer protocol. Allows to connect with the server. Can be used to transfer files:
   get <filename> - download file from the server.
   put <filename> - upload the file to the server.
   mget * - download multiple files.
   mput * - upload multiple files.
   bye or exit - close FTP connection and exit FTP client.
   close - close FTP connection without exiting the FTP client.

telnet <hostname> <port> (by default port 23) - allows to remotly access the server. It's useful when need to get a remote access to servers and networking devices (routers switches).

[*] curl

wget <option> <url> - used for non-interactive downloading files. Supports follow protocols: HTTP, HTTPS, FTP. Example of usage:
   wget https://www.example.com/file.zip - download file.
   wget -O custom_name.zip wget https://www.example.com/file.zip - save file with a specific name.
   wget -c https://www.example.com/largefile.zip - continue an incomplete download.

rsync <option> <source_files> <destination_files> - used for synchronizing file and directories. It insures that that the destination is an exact copy of source. Examples of usage:
   rsync test1.py test2.py - ensures that test1.py matches to test2.py in content and metadata. If it's not, updates test2.py acording to test1.py. If test2.py doesn't exist it will create it with a content of source (test1.py)
   rsync -avzh test1.py test2.py - the first command with additional options:
       -a - archive mode. preserving permissions, user, timestamps and recursively copies directories.
       -v - verobose.
       -z - compress data to reduce the amount of data sent over the network.
       -h - human readable.
   rsync -avzh myfile mydir/ - ensues that file 'myfile' exists in 'mydir/' directory.
   
   rsync -avzh mydir mydir2/ - ensues not only content but a source file 'mydir' with it.
   rsync -avzh mydir/ mydir2/ - unsues only content of source file to 'mydir2' destination file.
   rsync -avzh mydir/ mydir2 - same as previous command.

   rsync -avzh --exclude 'somedir1/*.csv' - with option '--exclude' that exludes specified files or directories.

   rsync -avzh -H --delete anaconda3/ anaconda3_bckup_2022-05-01 - making backup using rsync. Explanation of new options:
      -H - preserves hardlinks.
      --delete - deletes the file in destination directory that don't exisit in source directories.

   [*] rsync -avzh -e ssh remoteuser@remoteserver.com:/mypath/mydir "/mytarget/dir/ - rsync from remote server.

fdfind or fd - it is an alternative to 'find' but it has simplified syntax and faster. Example of usage:
   fd 'test' <directory> - find files/folders by pattern 'test' under the specified directory.
   fd . /my_dir - find all files in 'my_dir'.
   fd '^m.*back.*$' - use regex.
   fd -e txt - finds files with 'txt' extention.
   fd -g <name_pattern> - global-based search. It will return the files/folders that will be match with pattern 100%.
   fd -H - includes hidden files.
   [*] fd ... -X ls -lhd --color=always 
   fd -e jpg -x convert {} {.}.png - conterts jpg files into png.
   fd -H .DS_Store -x rm {} - searchs the file '.DS_Store' in the current directory and removes it.
   fd -S +2g - finds files, larger than 2 GB.
   
      fd --newer 1h - finds, that was modified within last hour.
      fd --changed-within 1month - displays files that have been modified within the month.
      fd --changed-before 1month - displays files that have been modified before the month.
      [*] fd --change-older-than 2weeks
   
find . -mtime -1 - modified in last 24 hours. Command options:
   -mtime -1 - modified within the last day.
find . -type f -mmin -120 -mmin +60 - files that have been modified 120 - 60 min ago. Command options:
   -type f - displays only regular files.
   -mmin -120 - more than 120 min ago.
   -mmin +60 - more than 60 min ago.
